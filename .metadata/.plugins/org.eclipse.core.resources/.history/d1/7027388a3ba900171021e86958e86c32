package simpledb;

import java.io.*;
import java.util.*;

/**
 * HeapFile is an implementation of a DbFile that stores a collection of tuples
 * in no particular order. Tuples are stored on pages, each of which is a fixed
 * size, and the file is simply a collection of those pages. HeapFile works
 * closely with HeapPage. The format of HeapPages is described in the HeapPage
 * constructor.
 * 
 * @see simpledb.HeapPage#HeapPage
 * @author Sam Madden
 */
public class HeapFile implements DbFile {
	
	private File file;
	private TupleDesc tuple_desc;

    /**
     * Constructs a heap file backed by the specified file.
     * 
     * @param f
     *            the file that stores the on-disk backing store for this heap
     *            file.
     */
    public HeapFile(File f, TupleDesc td) {
        this.file = f;
        this.tuple_desc = td;
    }

    /**
     * Returns the File backing this HeapFile on disk.
     * 
     * @return the File backing this HeapFile on disk.
     */
    public File getFile() {
        return file;
    }

    /**
     * Returns an ID uniquely identifying this HeapFile. Implementation note:
     * you will need to generate this tableid somewhere to ensure that each
     * HeapFile has a "unique id," and that you always return the same value for
     * a particular HeapFile. We suggest hashing the absolute file name of the
     * file underlying the heapfile, i.e. f.getAbsoluteFile().hashCode().
     * 
     * @return an ID uniquely identifying this HeapFile.
     */
    public int getId() {
        return file.getAbsoluteFile().hashCode();
    }

    /**
     * Returns the TupleDesc of the table stored in this DbFile.
     * 
     * @return TupleDesc of this DbFile.
     */
    public TupleDesc getTupleDesc() {
        return tuple_desc;
    }

    // see DbFile.java for javadocs
    public Page readPage(PageId pid) {
        // some code goes here
        return null;
    }

    // see DbFile.java for javadocs
    public void writePage(Page page) throws IOException {
        // some code goes here
        // not necessary for lab1
    }

    /**
     * Returns the number of pages in this HeapFile.
     */
    public int numPages() {
        return (int) file.length() / BufferPool.getPageSize();
    }

    // see DbFile.java for javadocs
    public ArrayList<Page> insertTuple(TransactionId tid, Tuple t)
            throws DbException, IOException, TransactionAbortedException {
        // some code goes here
        return null;
        // not necessary for lab1
    }

    // see DbFile.java for javadocs
    public ArrayList<Page> deleteTuple(TransactionId tid, Tuple t) throws DbException,
            TransactionAbortedException {
        // some code goes here
        return null;
        // not necessary for lab1
    }

    // see DbFile.java for javadocs
    public DbFileIterator iterator(TransactionId tid) {
		DbFileIterator iter = new HeapFileIterator(tid, this);
		return iter;
    }
    
    public class HeapFileIterator implements DbFileIterator {
    	private int index;
    	private TransactionId trans_id;
    	private HeapFile file;
    	private Iterator<Tuple> iter;
    	
    	public HeapFileIterator(TransactionId tid, HeapFile f) {
    		this.trans_id = tid;
    		this.file = f;
    	}
    	
    	public void open() throws DbException, TransactionAbortedException {
    		index = 0;
    		PageId page_id = new HeapPageId(file.getId(),index);
    		HeapPage heap_page = (HeapPage) Database.getBufferPool().getPage(trans_id, page_id, null);
    		iter = heap_page.iterator();
    	}
    	
    	public boolean hasNext() throws DbException, TransactionAbortedException {
    		if (index > file.numPages() || iter == null) {
				return false;
			}
    		if (iter.hasNext()) {
    			return true;
    		}
    		else {
    			PageId page_id = new HeapPageId(file.getId(), index+1);
    			HeapPage heap_page = (HeapPage) Database.getBufferPool().getPage(trans_id,page_id, null);
    			return heap_page.iterator().hasNext();
    		}
    		
    	}

		public Tuple next() throws DbException, TransactionAbortedException,
				NoSuchElementException {
			if (iter == null) {
				throw new NoSuchElementException("no more tuples");
			}
			if(iter.hasNext()) {
				return iter.next();
			}
			else {
				PageId page_id = new HeapPageId(file.getId(), index+1);
    			HeapPage heap_page = (HeapPage) Database.getBufferPool().getPage(trans_id,page_id, null);
    			if (heap_page.iterator().hasNext()) {
    				index++;
    				iter = heap_page.iterator();
    				return iter.next();
    			}
			}
			return null;
		}

		public void rewind() throws DbException, TransactionAbortedException {
			close();
			open();
		}

		public void close() {
			index = 0;
			iter = null;
		}

    }

}

